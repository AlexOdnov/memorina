!function(t){var e={};function r(a){if(e[a])return e[a].exports;var s=e[a]={i:a,l:!1,exports:{}};return t[a].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,a){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(a,s,function(e){return t[e]}.bind(null,s));return a},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);const a=t=>{const e=document.createElement("div"),r=`<div class="card__cover"></div>\n  <div class="card__face">${t}</div>`;var a,s;return e.className="card card--playable",e.insertAdjacentHTML("afterbegin",r),e.style.order=(a=1,s=20,Math.floor(a+(s+1-a)*Math.random())),e.dataset.number=t,e};new class{constructor(){this.playground=document.querySelector(".playground"),this.btn=document.querySelector(".btn"),this.cardAmount=document.forms.controls.cardAmount,this.score=document.forms.controls.score,this.isGameStarted=!1,this.cardCounter=null,this.prevCard=null,this.init()}init(){this.btn.addEventListener("click",function(t){t.preventDefault(),this.toggleGame()}.bind(this)),this.playground.addEventListener("click",this.checkCard.bind(this))}startGame(){const t=+this.cardAmount.value;this.score.value=0,this.cardCounter=t,this.fillPlayground(t),14!==t&&18!==t||this.playground.append((t=>{const e=document.createElement("div");return e.insertAdjacentHTML("afterbegin",'<div class="card__cover"></div>'),e.className="card card--placeholder",14===t?e.classList.add("card--placeholder-14"):18===t&&e.classList.add("card--placeholder-18"),e})(t)),this.playground.classList.remove("playground--covered")}stopGame(){this.playground.classList.add("playground--covered"),setTimeout(()=>{this.playground.className="playground game__playground playground--covered",this.playground.innerHTML=""},500)}toggleGame(){this.isGameStarted?(this.isGameStarted=!1,this.stopGame(),this.btn.classList.remove("btn--stop"),this.btn.classList.add("btn--start")):(this.isGameStarted=!0,this.startGame(),this.btn.classList.remove("btn--start"),this.btn.classList.add("btn--stop"))}fillPlayground(t){const e=[];for(let r=1;r<=t;r++)e.push(a(Math.ceil(r/2)));this.playground.classList.add("playground--"+t),this.playground.append(...e)}checkCard(t){const e=t.target.closest(".card--playable");if(e&&!e.classList.contains("card--active"))if(e.classList.add("card--active"),this.prevCard){if(this.prevCard.dataset.number!==e.dataset.number){const t=this.prevCard;return this.score.value=+this.score.value-50,this.prevCard=null,void setTimeout(()=>{t.classList.remove("card--active"),e.classList.remove("card--active")},1e3)}if(this.prevCard.dataset.number===e.dataset.number){const t=this.prevCard;this.score.value=+this.score.value+200,this.prevCard=null,this.cardCounter-=2,this.cardCounter||setTimeout(()=>{this.toggleGame()},2e3),setTimeout(()=>{t.className="card card--placeholder",e.className="card card--placeholder"},1e3)}}else this.prevCard=e}}}]);